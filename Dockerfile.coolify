# Multi-service Dockerfile for Coolify deployment
# This builds and runs both frontend (Next.js) and backend (Medusa) in a single container

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    netcat-openbsd \
    bash

WORKDIR /app

# Stage 1: Build Backend
FROM base AS backend-builder
WORKDIR /app/backend

# Copy backend package files
COPY ocean-backend/package*.json ./
RUN npm install --include=dev --legacy-peer-deps

# Copy backend source code
COPY ocean-backend/ ./

# Build backend (if needed)
RUN npm run build 2>/dev/null || echo "No backend build step needed"

# Stage 2: Build Frontend  
FROM base AS frontend-builder
WORKDIR /app/frontend

# Copy frontend package files
COPY package*.json ./
RUN npm install --legacy-peer-deps

# Copy frontend source code
COPY . .
# Exclude backend directory to avoid conflicts
RUN rm -rf ocean-backend

# Build Next.js application
RUN npm run build

# Stage 3: Production Runtime
FROM base AS runner

# Create application directories
WORKDIR /app
RUN mkdir -p /app/frontend /app/backend

# Create non-root user for security
RUN addgroup -S nodejs && adduser -S nextjs -G nodejs

# Copy built backend from backend-builder
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend /app/backend

# Copy built frontend from frontend-builder (for Next.js standalone mode)
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/standalone /app/frontend/
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/static /app/frontend/.next/static
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/public /app/frontend/public

# Fix Next.js standalone static asset serving
# The standalone build expects static files in specific locations
RUN cp -r /app/frontend/public/* /app/frontend/ 2>/dev/null || true

# Copy startup scripts for backend
COPY --from=backend-builder /app/backend/startup.sh /app/backend/startup-simple.sh /app/backend/
RUN chmod +x /app/backend/startup.sh /app/backend/startup-simple.sh

# Create startup script that runs both services
RUN cat > /app/start-all.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Shenna's Studio services..."

# Start backend first
echo "Starting Medusa backend..."
cd /app/backend
if [ "$STARTUP_MODE" = "simple" ]; then
    ./startup-simple.sh &
else
    ./startup.sh &
fi
BACKEND_PID=$!

# Wait for backend to be ready
echo "Waiting for backend to be ready..."
for i in {1..60}; do
    if curl -f http://localhost:9000/health >/dev/null 2>&1; then
        echo "Backend is ready!"
        break
    fi
    if [ $i -eq 60 ]; then
        echo "Backend failed to start in time"
        exit 1
    fi
    sleep 2
done

# Start frontend
echo "Starting Next.js frontend..."
cd /app/frontend
node server.js &
FRONTEND_PID=$!

# Function to handle shutdown
cleanup() {
    echo "Shutting down services..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
    wait $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Keep both processes running
wait $BACKEND_PID $FRONTEND_PID
EOF

RUN chmod +x /app/start-all.sh

# Create uploads and static directories
RUN mkdir -p /app/backend/uploads /app/backend/static && \
    chown -R nextjs:nodejs /app

# Set ownership
USER nextjs

# Expose ports
EXPOSE 3000 9000 7001

# Environment variables
ENV NODE_ENV=production
ENV HOSTNAME=0.0.0.0

# Health check for both services
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=5 \
    CMD curl -f http://localhost:3000/api/health || curl -f http://localhost:3000 || exit 1

# Use our custom startup script
CMD ["/app/start-all.sh"]
EOF