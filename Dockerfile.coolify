# Coolify Dockerfile for combined frontend + backend deployment
# Mimics the behavior of "npm run dev:full:turbo" for production

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash

WORKDIR /app

# Install dependencies for both projects
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY ocean-backend/package*.json ./ocean-backend/

# Install dependencies for building
RUN npm ci && npm cache clean --force
RUN cd ocean-backend && npm ci && npm cache clean --force

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/ocean-backend/node_modules ./ocean-backend/node_modules

# Copy source code
COPY . .

# Set production environment for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build both applications with production optimizations
RUN npm run build
RUN cd ocean-backend && npm run build

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV HOSTNAME=0.0.0.0
ENV PORT=3000

# Security and performance optimizations
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Create user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built applications
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy backend
COPY --from=builder --chown=nextjs:nodejs /app/ocean-backend ./ocean-backend

# Create startup script (mimics concurrently behavior)
RUN cat > /app/start-combined.sh << 'EOF'
#!/bin/bash
set -e

echo "🌊 Starting Shenna's Studio (Frontend + Backend)"

# Function to handle cleanup
cleanup() {
    echo "🛑 Shutting down services..."
    kill $(jobs -p) 2>/dev/null || true
    exit 0
}
trap cleanup SIGTERM SIGINT

# Auto-initialization for production
echo "🔧 Setting up production environment..."
cd /app/ocean-backend

# Auto-migrate database if enabled
if [ "$AUTO_MIGRATE" = "true" ]; then
    echo "📦 Running database migrations..."
    npx medusa db:migrate --force || echo "Migration failed or not needed"
fi

# Auto-create admin if enabled
if [ "$AUTO_CREATE_ADMIN" = "true" ]; then
    echo "👤 Creating admin user..."
    npm run create-admin || echo "Admin creation failed or already exists"
fi

# Auto-seed if enabled
if [ "$AUTO_SEED" = "true" ]; then
    echo "🌱 Seeding database..."
    npm run seed || echo "Seeding failed or not needed"
fi

# Start backend
echo "🚀 Starting Medusa backend on port 9000..."
npm start &
BACKEND_PID=$!

# Wait for backend to be ready
echo "⏳ Waiting for backend to be ready..."
for i in {1..60}; do
    if curl -f http://localhost:9000/health >/dev/null 2>&1; then
        echo "✅ Backend is ready!"
        break
    fi
    if [ $i -eq 60 ]; then
        echo "❌ Backend failed to start"
        exit 1
    fi
    sleep 2
done

# Start frontend
echo "🚀 Starting Next.js frontend on port 3000..."
cd /app
node server.js &
FRONTEND_PID=$!

echo "✅ Both services are running!"
echo "📱 Frontend: http://localhost:3000"
echo "🛠️  Backend API: http://localhost:9000"
echo "👤 Admin Panel: http://localhost:9000/app"

# Keep processes running
wait $BACKEND_PID $FRONTEND_PID
EOF

RUN chmod +x /app/start-combined.sh
RUN chown -R nextjs:nodejs /app

USER nextjs

# Expose ports
EXPOSE 3000 9000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/api/health && curl -f http://localhost:9000/health || exit 1

# Start both services
CMD ["/app/start-combined.sh"]