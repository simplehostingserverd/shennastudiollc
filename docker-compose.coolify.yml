version: '3.8'

# Complete Docker Compose configuration for Shenna's Studio
# Deploy this entire stack in Coolify as a single service

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: medusa_db
      POSTGRES_USER: medusa_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U medusa_user -d medusa_db']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shenna-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shenna-network

  # Medusa Backend (API + Admin Panel)
  backend:
    build:
      context: https://github.com/simplehostingserverd/shennastudiollc.git#main:ocean-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://medusa_user:${POSTGRES_PASSWORD}@postgres:5432/medusa_db
      DATABASE_SSL: "false"
      DATABASE_SSL_REJECT_UNAUTHORIZED: "false"

      # Redis
      REDIS_URL: redis://redis:6379

      # Security
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}

      # CORS - Update these domains to match your setup
      STORE_CORS: https://shop.shennastudio.com,https://www.shennastudio.com,https://shennastudio.com
      ADMIN_CORS: https://admin.shennastudio.com
      AUTH_CORS: https://shop.shennastudio.com,https://www.shennastudio.com,https://shennastudio.com

      # Admin User
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@shennastudio.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      # Backend URLs
      BACKEND_URL: https://admin.shennastudio.com
      MEDUSA_BACKEND_URL: https://admin.shennastudio.com

      # Auto-initialization
      AUTO_MIGRATE: "true"
      AUTO_SEED: "false"
      AUTO_CREATE_ADMIN: "true"

      # Worker mode
      WORKER_MODE: shared
      DISABLE_ADMIN: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - medusa_uploads:/app/uploads
      - medusa_static:/app/static
    networks:
      - shenna-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/health']
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s
    labels:
      - "coolify.managed=true"
      - "coolify.name=backend"
      - "coolify.port=9000"

  # Next.js Frontend (Storefront)
  frontend:
    build:
      context: https://github.com/simplehostingserverd/shennastudiollc.git#main
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Backend Connection
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: https://admin.shennastudio.com
      NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: ${NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY}

      # Internal backend connection
      BACKEND_HOST: backend
      BACKEND_PORT: 9000

      # Payment - Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}

      # Search - Algolia (Optional)
      NEXT_PUBLIC_ALGOLIA_APPLICATION_ID: ${NEXT_PUBLIC_ALGOLIA_APPLICATION_ID:-}
      NEXT_PUBLIC_ALGOLIA_SEARCH_API_KEY: ${NEXT_PUBLIC_ALGOLIA_SEARCH_API_KEY:-}
      ALGOLIA_ADMIN_API_KEY: ${ALGOLIA_ADMIN_API_KEY:-}

      # Images - Cloudinary (Optional)
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-}
      NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}

      # App Configuration
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      HOSTNAME: 0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - shenna-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s
    labels:
      - "coolify.managed=true"
      - "coolify.name=frontend"
      - "coolify.port=3000"

  # Background Worker (Optional - uncomment if you need separate worker processing)
  # worker:
  #   build:
  #     context: https://github.com/simplehostingserverd/shennastudiollc.git#main:ocean-backend
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   environment:
  #     DATABASE_URL: postgresql://medusa_user:${POSTGRES_PASSWORD}@postgres:5432/medusa_db
  #     DATABASE_SSL: "false"
  #     DATABASE_SSL_REJECT_UNAUTHORIZED: "false"
  #     REDIS_URL: redis://redis:6379
  #     NODE_ENV: production
  #     JWT_SECRET: ${JWT_SECRET}
  #     COOKIE_SECRET: ${COOKIE_SECRET}
  #     STORE_CORS: https://shop.shennastudio.com,https://www.shennastudio.com,https://shennastudio.com
  #     ADMIN_CORS: https://admin.shennastudio.com
  #     AUTH_CORS: https://shop.shennastudio.com,https://www.shennastudio.com,https://shennastudio.com
  #     BACKEND_URL: https://admin.shennastudio.com
  #     MEDUSA_BACKEND_URL: https://admin.shennastudio.com
  #     WORKER_MODE: worker
  #     DISABLE_ADMIN: "true"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     backend:
  #       condition: service_healthy
  #   networks:
  #     - shenna-network

volumes:
  postgres_data:
  redis_data:
  medusa_uploads:
  medusa_static:

networks:
  shenna-network:
    driver: bridge
