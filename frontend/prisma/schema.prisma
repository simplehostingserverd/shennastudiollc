generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  role         String        @default("customer")
  orders       Order[]
  blogPosts    BlogPost[]
  blogComments BlogComment[]
  messages     Message[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Int         // price in cents
  imageUrl    String?
  orders      OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id                  String      @id @default(cuid())
  userId              String?
  user                User?       @relation(fields: [userId], references: [id])
  items               OrderItem[]
  total               Int         // total in cents
  status              String      @default("pending")
  stripeSessionId     String?     @unique
  stripePaymentIntent String?

  // Customer Information
  customerEmail       String?
  customerName        String?
  customerPhone       String?

  // Shipping Address
  shippingName        String?
  shippingLine1       String?
  shippingLine2       String?
  shippingCity        String?
  shippingState       String?
  shippingPostalCode  String?
  shippingCountry     String?

  // Billing Address
  billingName         String?
  billingLine1        String?
  billingLine2        String?
  billingCity         String?
  billingState        String?
  billingPostalCode   String?
  billingCountry      String?

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([stripeSessionId])
  @@index([customerEmail])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int     // price at time of order in cents
}

model ProductComment {
  id           String   @id @default(cuid())
  productId    String
  customerName String
  email        String
  comment      String
  rating       Int      @default(5)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AffiliateLink {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  placement   String
  isActive    Boolean  @default(true)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdPlacement {
  id          String   @id @default(cuid())
  name        String
  adCode      String
  placement   String
  isActive    Boolean  @default(true)
  impressions Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogPost {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  excerpt         String
  content         String        @db.Text
  coverImage      String?
  category        String
  tags            String[]
  keywords        String
  metaDescription String?
  authorId        String
  author          User          @relation(fields: [authorId], references: [id])
  published       Boolean       @default(false)
  publishedAt     DateTime?
  views           Int           @default(0)
  readTime        String?
  seoScore        Int?
  comments        BlogComment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([slug])
  @@index([published])
  @@index([category])
}

model BlogComment {
  id        String   @id @default(cuid())
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  name      String
  email     String?
  content   String   @db.Text
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([approved])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  isPrivate   Boolean   @default(false)
  order       Int       @default(0)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
}

model Message {
  id        String   @id @default(cuid())
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userName  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([createdAt])
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  subscribed  Boolean  @default(true)
  source      String?
  tags        String[]
  createdAt   DateTime @default(now())
  unsubscribedAt DateTime?
}
